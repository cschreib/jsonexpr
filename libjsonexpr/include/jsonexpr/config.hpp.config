#ifndef JSONEXPR_CONFIG_HPP
#define JSONEXPR_CONFIG_HPP

#include <version> // for C++ feature check macros

// These are defined from build-time configuration.
// clang-format off
#define JSONEXPR_VERSION "${CMAKE_PROJECT_VERSION}"
#define JSONEXPR_FULL_VERSION "${JSONEXPR_FULL_VERSION}"
#define JSONEXPR_VERSION_MAJOR ${CMAKE_PROJECT_VERSION_MAJOR}
#define JSONEXPR_VERSION_MINOR ${CMAKE_PROJECT_VERSION_MINOR}
#define JSONEXPR_VERSION_PATCH ${CMAKE_PROJECT_VERSION_PATCH}

#cmakedefine01 JSONEXPR_USE_STD_EXPECTED
#if JSONEXPR_USE_STD_EXPECTED && !defined(__cpp_lib_expected)
#    error "std::expected not available; please set JSONEXPR_USE_STD_EXPECTED to OFF"
#endif

#cmakedefine01 JSONEXPR_USE_STD_FROM_CHARS
#if JSONEXPR_USE_STD_FROM_CHARS && !defined(__cpp_lib_to_chars)
#    error "std::from_chars not available; please set JSONEXPR_USE_STD_FROM_CHARS to OFF"
#endif

#if !defined(JSONEXPR_SHARED_LIBRARY)
#cmakedefine01 JSONEXPR_SHARED_LIBRARY
#endif

#if JSONEXPR_SHARED_LIBRARY
#    if defined(_MSC_VER)
#        if defined(JSONEXPR_EXPORTS)
#            define JSONEXPR_EXPORT __declspec(dllexport)
#        else
#            define JSONEXPR_EXPORT __declspec(dllimport)
#        endif
#    elif defined(__clang__) || defined(__GNUC__)
#        define JSONEXPR_EXPORT [[gnu::visibility("default")]]
#    else
#        define JSONEXPR_EXPORT
#    endif
#else
#    define JSONEXPR_EXPORT
#endif

#endif
